import React, { useState, useEffect } from "react";
import { useParams } from 'react-router-dom';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Input from '@mui/material/Input';
import Box from '@mui/material/Box';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import axios from 'axios';

export default function ItemDetail() {
  const { iid } = useParams();
  const [isLoading, setIsLoading] = useState(true);
  const [item, setItem] = useState({});
  const [options, setOptions] = useState([]);
  const [tags, setTags] = useState([]);
  const [selectedOptions, setSelectedOptions] = useState([]); // 선택된 옵션 배열을 관리합니다.

  useEffect(() => {
    axios.get(`/ft/item/detail/${iid}`)
      .then(response => {
        const { item, options, tags } = response.data; // 서버 응답에서 item, options, tags 추출

        // 아이템 정보 설정
        const formattedItem = {
          iid: item.iid,
          name: item.name,
          category: item.category,
          img1: item.img1,
          price: item.price,
        };
        setItem(formattedItem);

        // 옵션 정보 설정
        const formattedOptions = options ? options.map(option => ({
          option: option.option,
          stock: option.count, // 재고 정보를 stock으로 설정합니다.
        })) : [];
        setOptions(formattedOptions);

        // 태그 정보 설정
        const formattedTags = tags ? tags.map(tag => ({
          itid: tag.itid,
          tag: tag.tag,
        })) : [];
        setTags(formattedTags);

        setIsLoading(false);
      })
      .catch(err => console.log(err))
  }, [iid]);

  // 수량 증가 함수
  const increaseQuantity = (index) => {
    const updatedSelectedOptions = [...selectedOptions];
    updatedSelectedOptions[index].count += 1;
    setSelectedOptions(updatedSelectedOptions);
  };

  // 수량 감소 함수
  const decreaseQuantity = (index) => {
    const updatedSelectedOptions = [...selectedOptions];
    if (updatedSelectedOptions[index].count > 0) {
      updatedSelectedOptions[index].count -= 1;
      setSelectedOptions(updatedSelectedOptions);
    }
  };

  // 옵션 선택 시 처리 함수
  const handleOptionChange = (e) => {
    const selectedOption = e.target.value;
    const optionIndex = selectedOptions.findIndex(option => option.option === selectedOption);
    if (optionIndex === -1) {
      // 선택된 옵션이 배열에 없을 경우, 새로 추가합니다.
      setSelectedOptions([...selectedOptions, { option: selectedOption, count: 0 }]);
    } else {
      // 선택된 옵션이 배열에 있을 경우, 해당 옵션의 수량을 초기화합니다.
      const updatedSelectedOptions = [...selectedOptions];
      updatedSelectedOptions[optionIndex].count = 0;
      setSelectedOptions(updatedSelectedOptions);
    }
  };

  return (
    <Grid container spacing={2}>
      <Grid item xs={12} md={7} style={{ textAlign: 'center' }}>
        <img src={item.img1} alt={item.img1} style={{ width: '80%', height: 400 }} />
        <p>카테고리: {item.category}</p>
      </Grid>
      <Grid item xs={12} md={5}>
        <h3>{item.name}</h3>
        <span>{item.price}</span><span>원</span>

        <div>
          <p>옵션:</p>
          <Select
            value=''
            onChange={handleOptionChange}
          >
            <MenuItem value=''>옵션 선택</MenuItem>
            {options.map(option => (
              <MenuItem key={option.option} value={option.option}>{option.option}</MenuItem>
            ))}
          </Select>
          {selectedOptions.map((option, index) => (
            <Box key={index} display="flex" alignItems="center" marginBottom={1}>
              <span>{option.option} 재고: {option.stock}</span>
              <Button onClick={() => decreaseQuantity(index)}>-</Button>
              <Input
                value={option.count}
                readOnly
              />
              <Button onClick={() => increaseQuantity(index)}>+</Button>
            </Box>
          ))}
        </div>
      </Grid>
    </Grid>
  )
}